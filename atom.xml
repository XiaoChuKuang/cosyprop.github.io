<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>J_Knight_</title>
  
  <subtitle>每天进步一点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/knightsj/knightsj.github.io/"/>
  <updated>2018-12-24T18:45:27.505Z</updated>
  <id>https://github.com/knightsj/knightsj.github.io/</id>
  
  <author>
    <name>J_Knight_</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018 年年终总结 - J_Knight_</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/2018%20%E5%B9%B4%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20-%20J_Knight_/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/2018 年年终总结 - J_Knight_/</id>
    <published>2018-12-24T18:41:19.916Z</published>
    <updated>2018-12-24T18:45:27.505Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://jknight-blog.oss-cn-shanghai.aliyuncs.com/career/self_conclusion_2019_header.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本篇是我今年的年终总结，主要总结了自己除了工作上的一些小目标的达成情况，包括社区，读书，健身，理财这几方面。&lt;/p&gt;
&lt;p&gt;工作方面最大的收获是来到了爱奇艺工作，来到这个平台之后所收获的不仅仅来自于自己做的事情本身，还有接触到的新同事们，新平台带给我的种种收获，感觉自己还是非常幸运的。&lt;/p&gt;
&lt;p&gt;工作上就提到这里，下面开始是本篇的主要内容。本篇分为三个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;今年达成的小目标：介绍今年已经达成的小目标以及详细情况&lt;/li&gt;
&lt;li&gt;今年未达成的小目标：介绍今年未达成的小目标以及详细情况&lt;/li&gt;
&lt;li&gt;展望明年：简单列一下想在明年达成的小目标。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在就从已经达成的小目标来开始介绍。&lt;/p&gt;
&lt;h1 id=&quot;今年达成的小目标&quot;&gt;&lt;a href=&quot;#今年达成的小目标&quot; class=&quot;headerlink&quot; title=&quot;今年达成的小目标&quot;&gt;&lt;/a&gt;今年达成的小目标&lt;/h1&gt;&lt;p&gt;今年已经达成的几个小目标有以下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;掘金社区粉丝超过1w（10300+）&lt;/li&gt;
&lt;li&gt;看完5+本技术书籍（8本）&lt;/li&gt;
&lt;li&gt;看完20+本非技术书籍（24本）&lt;/li&gt;
&lt;li&gt;减掉20+斤（21斤）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Career" scheme="https://github.com/knightsj/knightsj.github.io/categories/Career/"/>
    
    
      <category term="Life" scheme="https://github.com/knightsj/knightsj.github.io/tags/Life/"/>
    
      <category term="Job" scheme="https://github.com/knightsj/knightsj.github.io/tags/Job/"/>
    
  </entry>
  
  <entry>
    <title>高效能程序员的修炼 - 读书笔记</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E9%AB%98%E6%95%88%E8%83%BD%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E4%BF%AE%E7%82%BC%20-%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/高效能程序员的修炼 - 读书笔记/</id>
    <published>2018-12-24T18:33:45.667Z</published>
    <updated>2018-12-24T18:33:45.668Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/859001-d4f6ace667765fd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;高效能程序员的修炼&quot;&gt;&lt;/p&gt;
&lt;p&gt;俗话说：程序员不能只想着写代码。在编程以外的闲暇时间，读一点这种有助于程序员扩展视野和提高素养的书籍是很好的。&lt;/p&gt;
&lt;p&gt;笔者找到了这本《高效能程序员的修炼》：本书作者是大名鼎鼎&lt;a href=&quot;http://stackoverflow.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stack Overflow&lt;/a&gt;的创始人Jeff Atwood，内容是有关代码以外的，需要每个程序员思考和注意的事情。&lt;/p&gt;
&lt;p&gt;这本书是笔者在今年1月份看的，因为忙于项目开发，所以没有整理好笔记。正好这周五公司app提交过审，有空宅在家里整理一下。笔记内容没有提到书中所说的每个方面，&lt;strong&gt;只是针对了笔者觉得比较重要的几点并结合了笔者自己的想法和感悟整理而成&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;笔者的&lt;strong&gt;读书笔记的格式&lt;/strong&gt;：&lt;br&gt;&lt;strong&gt;标题&lt;/strong&gt;：与书中目录不符，完全由笔者自己列出。&lt;br&gt;&lt;strong&gt;正文&lt;/strong&gt;：浅灰色框中的文字为书中摘录，其他部分均为笔者个人观点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎各路大侠指点！欢迎各路大侠指点！欢迎各路大侠指点！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BookNote" scheme="https://github.com/knightsj/knightsj.github.io/categories/BookNote/"/>
    
    
      <category term="BookNote" scheme="https://github.com/knightsj/knightsj.github.io/tags/BookNote/"/>
    
      <category term="IT" scheme="https://github.com/knightsj/knightsj.github.io/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>高度封装FMDB框架：各用一句代码更新（添加&amp;修改），查询，删除用户信息</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E9%AB%98%E5%BA%A6%E5%B0%81%E8%A3%85FMDB%E6%A1%86%E6%9E%B6%EF%BC%9A%E5%90%84%E7%94%A8%E4%B8%80%E5%8F%A5%E4%BB%A3%E7%A0%81%E6%9B%B4%E6%96%B0%EF%BC%88%E6%B7%BB%E5%8A%A0&amp;%E4%BF%AE%E6%94%B9%EF%BC%89%EF%BC%8C%E6%9F%A5%E8%AF%A2%EF%BC%8C%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/高度封装FMDB框架：各用一句代码更新（添加&amp;修改），查询，删除用户信息/</id>
    <published>2018-12-24T18:33:45.666Z</published>
    <updated>2018-12-24T18:33:45.667Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在移动开发中，有时不得不在客户端本地保存一些数据。在iOS端，我们可以使用plist，属性列表等技术来存储数据，而相比而下更高端一点的，我们也可以使用&lt;strong&gt;数据库&lt;/strong&gt;来存储数据。&lt;/p&gt;
&lt;p&gt;有趣的是，很多iOS开发者没有去选择使用苹果自家的Core Data技术来操作数据库，而是选择了&lt;a href=&quot;[https://github.com/ccgus/fmdb](https://github.com/ccgus/fmdb&quot;&gt;FMDB&lt;/a&gt;)这个第三方框架。&lt;/p&gt;
&lt;p&gt;该框架很好地封装了操作繁琐的SQLite语句，让数据库的操作更加面向对象，而且上手快，门槛低，不用学习数据库的相关知识就可以使用自如。如此优秀流行的框架是值得学习的，于是笔者这两天研究了一下FMDB。研究后，略有所思，将它封装了一下，写了一个&lt;code&gt;Manager&lt;/code&gt;类，最后结合了一个Demo演示如何使用这个类。&lt;/p&gt;
&lt;p&gt;该博客分为两个部分:第一个部分讲解笔者封装的这个&lt;code&gt;Manager&lt;/code&gt;类；第二部分结合Demo来体现该类的实用性。&lt;/p&gt;
    
    </summary>
    
      <category term="Production" scheme="https://github.com/knightsj/knightsj.github.io/categories/Production/"/>
    
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://github.com/knightsj/knightsj.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计的设计模式（二）：结构型模式（附 Demo 及 UML 类图）</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%99%84%20Demo%20%E5%8F%8A%20UML%20%E7%B1%BB%E5%9B%BE%EF%BC%89/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/面向对象设计的设计模式（二）：结构型模式（附 Demo 及 UML 类图）/</id>
    <published>2018-12-24T18:33:45.663Z</published>
    <updated>2018-12-24T18:33:45.666Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://jknight-blog.oss-cn-shanghai.aliyuncs.com/design-pattern-creation/odd_dp2_banner.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本篇是面向对象设计系列文章的第三篇，讲解的是设计模式中的结构型模式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外观模式&lt;/li&gt;
&lt;li&gt;适配器模式&lt;/li&gt;
&lt;li&gt;桥接模式&lt;/li&gt;
&lt;li&gt;代理模式&lt;/li&gt;
&lt;li&gt;装饰者模式&lt;/li&gt;
&lt;li&gt;享元模式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;该系列前面的两篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://knightsj.github.io/2018/09/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%EF%BC%88%E9%99%84%20Demo%20%E5%8F%8A%20UML%20%E7%B1%BB%E5%9B%BE%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面向对象设计的六大设计原则（附 Demo 及 UML 类图）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://knightsj.github.io/2018/10/21/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%99%84%20Demo%20%E5%8F%8A%20UML%20%E7%B1%BB%E5%9B%BE%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面向对象设计的设计模式（一）：创建型设计模式（附 Demo 及 UML 类图）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Object-Oriented" scheme="https://github.com/knightsj/knightsj.github.io/categories/Object-Oriented/"/>
    
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/tags/iOS/"/>
    
      <category term="Objectice-C" scheme="https://github.com/knightsj/knightsj.github.io/tags/Objectice-C/"/>
    
      <category term="Object-Oriented" scheme="https://github.com/knightsj/knightsj.github.io/tags/Object-Oriented/"/>
    
      <category term="Design Pattern" scheme="https://github.com/knightsj/knightsj.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计的设计模式（一）：创建型模式（附 Demo 及 UML 类图）</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%99%84%20Demo%20%E5%8F%8A%20UML%20%E7%B1%BB%E5%9B%BE%EF%BC%89/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/面向对象设计的设计模式（一）：创建型模式（附 Demo 及 UML 类图）/</id>
    <published>2018-12-24T18:33:45.654Z</published>
    <updated>2018-12-24T18:33:45.662Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://jknight-blog.oss-cn-shanghai.aliyuncs.com/design-pattern-creation/odd_dp2_banner.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;继上一篇的&lt;a href=&quot;https://knightsj.github.io/2018/09/09/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%EF%BC%88%E9%99%84%20Demo%20%E5%8F%8A%20UML%20%E7%B1%BB%E5%9B%BE%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面向对象设计的六大设计原则（附 Demo 及 UML 类图）&lt;/a&gt;，本篇是面向对象设计系列的第二个部分：面向对象设计的设计模式的第一篇文章。&lt;/p&gt;
&lt;p&gt;最开始说一下什么是设计模式。关于设计模式的概念，有很多不同的版本，在这里说一下我个人比较赞同的一个说法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设计模式用于在特定的条件下为一些重复出现的软件设计问题提供合理的、有效的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;去掉一些定语的修饰，这句话精简为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设计模式为问题提供方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来看，设计模式其实就是针对某些问题的一些方案。在软件开发中，即使很多人在用不同的语言去开发不同的业务，但是很多时候这些人遇到的问题抽象出来都是相似的。一些卓越的开发者将一些常出现的问题和对应的解决方案汇总起来，总结出了这些设计模式。&lt;/p&gt;
&lt;p&gt;因此掌握了这些设计模式，可以让我们更好地去解决开发过程中遇到的一些常见问题。而且对这些问题的解决方案的掌握程度越好，我们就越能够打破语言本身的限制去解决问题，也就是增强“软件开发的内功”。&lt;/p&gt;
&lt;p&gt;介绍设计模式最著名的一本书莫属《设计模式 可复用面向对象软件的基础》这本书，书中共介绍了23个设计模式。而这些设计模式分为三大类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建型&lt;/strong&gt;设计模式：侧重于对象的创建。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结构型&lt;/strong&gt;设计模式：侧重于接口的设计和系统的结构。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行为型&lt;/strong&gt;设计模式：侧重于类或对象的行为。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Object-Oriented" scheme="https://github.com/knightsj/knightsj.github.io/categories/Object-Oriented/"/>
    
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/tags/iOS/"/>
    
      <category term="Objectice-C" scheme="https://github.com/knightsj/knightsj.github.io/tags/Objectice-C/"/>
    
      <category term="Object-Oriented" scheme="https://github.com/knightsj/knightsj.github.io/tags/Object-Oriented/"/>
    
      <category term="Design Pattern" scheme="https://github.com/knightsj/knightsj.github.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计的六大设计原则（附 Demo 及 UML 类图）</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%EF%BC%88%E9%99%84%20Demo%20%E5%8F%8A%20UML%20%E7%B1%BB%E5%9B%BE%EF%BC%89/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/面向对象设计的六大设计原则（附 Demo 及 UML 类图）/</id>
    <published>2018-12-24T18:33:45.652Z</published>
    <updated>2018-12-24T18:33:45.654Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://jknight-blog.oss-cn-shanghai.aliyuncs.com/design-principle/odd_dp_banner.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;学习初衷与讲解方式&quot;&gt;&lt;a href=&quot;#学习初衷与讲解方式&quot; class=&quot;headerlink&quot; title=&quot;学习初衷与讲解方式&quot;&gt;&lt;/a&gt;学习初衷与讲解方式&lt;/h1&gt;&lt;p&gt;笔者想在iOS从业第三年结束之前系统学习一下关于设计模式方面的知识。而在学习设计模式之前，觉得更有必要先学习面向对象设计（OOD：Object Oriented Design）的几大设计原则，为后面设计模式的学习打下基础。&lt;/p&gt;
&lt;p&gt;本篇分享的就是笔者近阶段学习和总结的面向对象设计的六个设计原则：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;缩写&lt;/th&gt;
&lt;th&gt;英文名称&lt;/th&gt;
&lt;th&gt;中文名称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SRP&lt;/td&gt;
&lt;td&gt;Single Responsibility Principle&lt;/td&gt;
&lt;td&gt;单一职责原则&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OCP&lt;/td&gt;
&lt;td&gt;Open Close Principle&lt;/td&gt;
&lt;td&gt;开闭原则&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LSP&lt;/td&gt;
&lt;td&gt;Liskov Substitution Principle&lt;/td&gt;
&lt;td&gt;里氏替换原则&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LoD&lt;/td&gt;
&lt;td&gt;Law of Demeter （ Least Knowledge Principle）&lt;/td&gt;
&lt;td&gt;迪米特法则（最少知道原则）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ISP&lt;/td&gt;
&lt;td&gt;Interface Segregation Principle&lt;/td&gt;
&lt;td&gt;接口分离原则&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DIP&lt;/td&gt;
&lt;td&gt;Dependency Inversion Principle&lt;/td&gt;
&lt;td&gt;依赖倒置原则&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Object-Oriented" scheme="https://github.com/knightsj/knightsj.github.io/categories/Object-Oriented/"/>
    
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/tags/iOS/"/>
    
      <category term="Objectice-C" scheme="https://github.com/knightsj/knightsj.github.io/tags/Objectice-C/"/>
    
      <category term="Object-Oriented" scheme="https://github.com/knightsj/knightsj.github.io/tags/Object-Oriented/"/>
    
      <category term="Design Principle" scheme="https://github.com/knightsj/knightsj.github.io/tags/Design-Principle/"/>
    
  </entry>
  
  <entry>
    <title>远程工作才是实现高效工作和幸福生活的有效途径 - 读《重来2》有感</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E8%BF%9C%E7%A8%8B%E5%B7%A5%E4%BD%9C%E6%89%8D%E6%98%AF%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%95%88%E5%B7%A5%E4%BD%9C%E5%92%8C%E5%B9%B8%E7%A6%8F%E7%94%9F%E6%B4%BB%E7%9A%84%E6%9C%89%E6%95%88%E9%80%94%E5%BE%84%20-%20%E8%AF%BB%E3%80%8A%E9%87%8D%E6%9D%A52%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/远程工作才是实现高效工作和幸福生活的有效途径 - 读《重来2》有感/</id>
    <published>2018-12-24T18:33:45.651Z</published>
    <updated>2018-12-24T18:33:45.652Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;朝九晚五，被禁锢在办公室里的工作模式是工业社会的产物。然而，在互联网崛起的今天，这种固定死板的工作模式反而拖累了我们。办公室早已变成了干扰工厂，把你的时间切成七零八碎的小块儿，工作无法顺利、及时地完成，更会造成心理上的疲惫。&lt;/p&gt;
&lt;p&gt;如果您也是一名互联网从业者，特别是程序员，问问周围的人：如果你可以自己选择时间地点来完成工作你会选择哪里？你能在哪一时间段或是哪一地点才能高效地完成工作？我想答案&lt;strong&gt;一定不是下午的办公室&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;笔者自己就是一名程序员，上班的时候被会议和同行的打断弄得苦不堪言，虽然有些沟通确是必要的。不过有一点我很清楚，我经常是在早上上班之前或是晚上睡觉之前才能&lt;strong&gt;完完全全，满意地&lt;/strong&gt;完成一个模块的开发。在下午的时候，我就会给自己安排做一些难度不高的任务，这样一来，打断所带来的负面影响会很低。&lt;/p&gt;
&lt;p&gt;因此笔者非常期望自己可以远程工作，摆脱这种固话的工作和生活方式，因为它能带来的好处真的是太多太多了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/859001-92f9e8f6e5690223.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;远程工作&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BookNote" scheme="https://github.com/knightsj/knightsj.github.io/categories/BookNote/"/>
    
    
      <category term="BookNote" scheme="https://github.com/knightsj/knightsj.github.io/tags/BookNote/"/>
    
      <category term="IT" scheme="https://github.com/knightsj/knightsj.github.io/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>详解iOS多图下载的缓存机制</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E8%AF%A6%E8%A7%A3iOS%E5%A4%9A%E5%9B%BE%E4%B8%8B%E8%BD%BD%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/详解iOS多图下载的缓存机制/</id>
    <published>2018-12-24T18:33:45.650Z</published>
    <updated>2018-12-24T18:33:45.651Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;做iOS开发也有半年多了，想想自己对一些第三方库还只是停留在简单运用的阶段，感觉心慌慌的。于是决定用一个月的时间深入了解一些好的第三方库。&lt;/p&gt;
&lt;p&gt;第一个想到了SDWebImage，这个库很不错，几乎每个iOS项目都会有它的影子，因为它很完美地解决了下载图片并显示的处理逻辑。那么深究它之前，笔者准备先了解一下多图下载的缓存机制，因为它和SDWebImage的方案类似。&lt;/p&gt;
&lt;p&gt;有一个多图缓存机制的教程是来自李明杰小码哥的，笔者觉得讲得挺不错的，于是就花了2个小时好好学习了一下。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://github.com/knightsj/knightsj.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>结合一个开源的底部菜单组件来讲一下如何封装一个React Native组件</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E7%BB%93%E5%90%88%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E7%9A%84%E5%BA%95%E9%83%A8%E8%8F%9C%E5%8D%95%E7%BB%84%E4%BB%B6%E6%9D%A5%E8%AE%B2%E4%B8%80%E4%B8%8B%E5%A6%82%E4%BD%95%E5%B0%81%E8%A3%85%E4%B8%80%E4%B8%AAReact%20Native%E7%BB%84%E4%BB%B6/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/结合一个开源的底部菜单组件来讲一下如何封装一个React Native组件/</id>
    <published>2018-12-24T18:33:45.647Z</published>
    <updated>2018-12-24T18:33:45.650Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;前几天写了一个React Native组件：一个可定制性比较高的底部弹出菜单（ActionSheet）。该组件符合React Native的特性：同时支持iOS和Android双平台，一份相同的代码会在两个平台上展示几乎完全相同的样式。&lt;/p&gt;
&lt;p&gt;先看一下效果(上排为iOS模拟器，下排为Android模拟器)：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jknight-blog.oss-cn-shanghai.aliyuncs.com/react_native/action_sheet/rn_as_show.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上图展示的是该组件的默认样式。由于该组件具有较高的定制性，所以只需要通过设置一些属性就可以得到更多不同的样式。&lt;/p&gt;
&lt;p&gt;开源项目地址：&lt;a href=&quot;https://github.com/knightsj/react-naive-highly-customizable-action-sheet&quot;&gt;GitHub:react-naive-highly-customizable-action-sheet&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Production" scheme="https://github.com/knightsj/knightsj.github.io/categories/Production/"/>
    
    
      <category term="React Native" scheme="https://github.com/knightsj/knightsj.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>程序员的职业素养 - 读书笔记</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%81%8C%E4%B8%9A%E7%B4%A0%E5%85%BB%20-%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/程序员的职业素养 - 读书笔记/</id>
    <published>2018-12-24T18:33:45.644Z</published>
    <updated>2018-12-24T18:33:45.646Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;好久木有读书了，因为前两次迭代比较忙，工作下来也在一直写代码。不过还好现在把握好了节奏，有时间读书了。&lt;/p&gt;
&lt;p&gt;我找了这本《程序员的职业素养》，内容比较简单，但是涵盖了一些程序员在工作过程中需要注意的一些细节问题，如果读者是程序员的话会对职业有很大帮助的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/859001-7f961cd28e79379f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;程序员的职业素养&quot;&gt;&lt;/p&gt;
&lt;p&gt;本书一直围绕着“专业”二字展开，以作者的观点阐述了何为”专业的程序员”：专业的程序员是如何思考，如何解决问题，如何承担责任。笔者将一些比较有体会的部分摘录出来，结合自己的心得整理出这篇读书笔记。内容的顺序和书中的顺序基本不符，完全按照笔者按照几大块归类整理而成。&lt;/p&gt;
    
    </summary>
    
      <category term="BookNote" scheme="https://github.com/knightsj/knightsj.github.io/categories/BookNote/"/>
    
    
      <category term="BookNote" scheme="https://github.com/knightsj/knightsj.github.io/tags/BookNote/"/>
    
      <category term="IT" scheme="https://github.com/knightsj/knightsj.github.io/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>程序员的修炼：从优秀到卓越 - 读书笔记</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E4%BF%AE%E7%82%BC%EF%BC%9A%E4%BB%8E%E4%BC%98%E7%A7%80%E5%88%B0%E5%8D%93%E8%B6%8A%20-%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/程序员的修炼：从优秀到卓越 - 读书笔记/</id>
    <published>2018-12-24T18:33:45.643Z</published>
    <updated>2018-12-24T18:33:45.644Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/859001-f3a3b8377fa20a7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;程序员的修炼 - 从优秀到卓越&quot;&gt;&lt;/p&gt;
&lt;p&gt;本书是笔者上一篇读书笔记&lt;a href=&quot;http://www.jianshu.com/p/33933a3ba977&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;高效能程序员的修炼&lt;/a&gt;的姊妹篇，同样介绍了一些程序员需要了解的，有关于编程本身以外的一些事情。&lt;/p&gt;
&lt;p&gt;和上一篇读书笔记的风格类似，笔者摘录了几段原书内容并结合了作者的感悟写下了这篇读书笔记。笔者还是深切希望各路英雄能提出宝贵的意见和想法。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="BookNote" scheme="https://github.com/knightsj/knightsj.github.io/categories/BookNote/"/>
    
    
      <category term="BookNote" scheme="https://github.com/knightsj/knightsj.github.io/tags/BookNote/"/>
    
      <category term="IT" scheme="https://github.com/knightsj/knightsj.github.io/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>浅谈互联网商业思维的几个误区 - 读《重来》有感</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E6%B5%85%E8%B0%88%E4%BA%92%E8%81%94%E7%BD%91%E5%95%86%E4%B8%9A%E6%80%9D%E7%BB%B4%E7%9A%84%E5%87%A0%E4%B8%AA%E8%AF%AF%E5%8C%BA%20-%20%E8%AF%BB%E3%80%8A%E9%87%8D%E6%9D%A5%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/浅谈互联网商业思维的几个误区 - 读《重来》有感/</id>
    <published>2018-12-24T18:33:45.642Z</published>
    <updated>2018-12-24T18:33:45.642Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近读了一些关于互联网思维和管理的一些书籍，感触颇深，想从团队，产品，公司方向和个人几个方面，结合笔者的个人经历分享一下笔者的思考和感悟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/859001-063cce725ad58f38.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;图片来自：www.pexels.com&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BookNote" scheme="https://github.com/knightsj/knightsj.github.io/categories/BookNote/"/>
    
    
      <category term="BookNote" scheme="https://github.com/knightsj/knightsj.github.io/tags/BookNote/"/>
    
      <category term="IT" scheme="https://github.com/knightsj/knightsj.github.io/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>浅显易懂讲解iOS多线程技术-GCD</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E6%B5%85%E6%98%BE%E6%98%93%E6%87%82%E8%AE%B2%E8%A7%A3%E7%9A%84iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8A%80%E6%9C%AF-GCD/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/浅显易懂讲解的iOS多线程技术-GCD/</id>
    <published>2018-12-24T18:33:45.641Z</published>
    <updated>2018-12-24T18:33:45.642Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;励志打造一篇浅显易懂地介绍iOS中GCD的文章！&lt;br&gt;笔者见过很多其他讲解GCD的博客，有些写得非常详细非常专业，几乎涵盖了GCD大大小小的全部知识，细致庞杂的内容容易让人摸不清主次，笔者觉得这类文章&lt;strong&gt;并不适合初学者学习&lt;/strong&gt;，于是决定写一篇针对一些只是听过，但是对GCD还不了解的童鞋们。&lt;/p&gt;
&lt;p&gt;本文排除了一些细枝末节，扰乱人头绪的东西，着重讲解了GCD中重要的知识点，并在最后展示了GCD中&lt;strong&gt;经常使用的函数&lt;/strong&gt;并附上结果图和讲解，简单明了。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://github.com/knightsj/knightsj.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>斯坦福大学iOS开发公开课总结（四 五）：属性字符串Demo</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6iOS%E5%BC%80%E5%8F%91%E5%85%AC%E5%BC%80%E8%AF%BE%E6%80%BB%E7%BB%93%EF%BC%88%E5%9B%9B%20%E4%BA%94%EF%BC%89%EF%BC%9A%E5%B1%9E%E6%80%A7%E5%AD%97%E7%AC%A6%E4%B8%B2Demo/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/斯坦福大学iOS开发公开课总结（四 五）：属性字符串Demo/</id>
    <published>2018-12-24T18:33:45.640Z</published>
    <updated>2018-12-24T18:33:45.641Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本节课讲解了iOS框架里几个重要的知识点：动态绑定，控制器的生命周期，属性字符串等。最后演示了一个Demo用来讲解属性字符串的几个功能。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://github.com/knightsj/knightsj.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>斯坦福大学iOS开发公开课总结（十）：多线程，UIScrollView，图片浏览器Demo</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6iOS%E5%BC%80%E5%8F%91%E5%85%AC%E5%BC%80%E8%AF%BE%E6%80%BB%E7%BB%93%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9A%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%8CUIScrollView%EF%BC%8C%E5%9B%BE%E7%89%87%E6%B5%8F%E8%A7%88%E5%99%A8Demo/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/斯坦福大学iOS开发公开课总结（十）：多线程，UIScrollView，图片浏览器Demo/</id>
    <published>2018-12-24T18:33:45.637Z</published>
    <updated>2018-12-24T18:33:45.640Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本节课讲授了多线程编程和UIScrollview控件，最后通过一个显示图片的Demo综合了本节课讲解的知识。通过本节课的学习，我们可以初步了解该如何处理耗时的任务来提高系统性能的方法以及通过UIScrollview控件来显示超出屏幕大小的图片并实现滚动和缩放的效果。&lt;/p&gt;
&lt;h1 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;实现多线程编程（将不同的任务放在主线程和子线程工作），可以有效利用系统硬件优势提高系统性能。&lt;br&gt;首先，先介绍几个概念：&lt;/p&gt;
&lt;h2 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h2&gt;&lt;p&gt;队列：在队列中放入用来执行任务的block。这些block按照队列的性质被取出到应该工作的线程(主线程，子线程)。&lt;/p&gt;
&lt;p&gt;队列分为串行队列和并行队列。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;放入串行队列的任务将会在主线程执行，执行顺序是按照顺序执行。&lt;/li&gt;
&lt;li&gt;放入并行队列的任务会在子线程执行，执行顺序是并行执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么什么样的任务会放在主线程或子线程执行呢？&lt;/p&gt;
&lt;h2 id=&quot;主线程-amp-子线程&quot;&gt;&lt;a href=&quot;#主线程-amp-子线程&quot; class=&quot;headerlink&quot; title=&quot;主线程&amp;amp;子线程&quot;&gt;&lt;/a&gt;主线程&amp;amp;子线程&lt;/h2&gt;&lt;p&gt;主线程：负责执行UI活动，绝大部分的UI活动都要在这里调用，不能让其阻塞，要将耗时的任务放到子线程来做。&lt;br&gt;子线程：负责执行耗时的运算，网络请求等不能放在主线程的任务。&lt;/p&gt;
&lt;p&gt;系统为我们提供了共用的主队列(Main Dispatch Queue)和全局并行队列(Global Dispatch Queue)。我们只需将需要执行的任务放入到这两类队列里就可以实现多线程编程。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://github.com/knightsj/knightsj.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>斯坦福大学iOS开发公开课总结（十四 十五）：CoreLocation，MapKit，在地图上标识Flickr摄影师的作品</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6iOS%E5%BC%80%E5%8F%91%E5%85%AC%E5%BC%80%E8%AF%BE%E6%80%BB%E7%BB%93%EF%BC%88%E5%8D%81%E5%9B%9B%20%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9ACoreLocation%EF%BC%8CMapKit%EF%BC%8C%E5%9C%A8%E5%9C%B0%E5%9B%BE%E4%B8%8A%E6%A0%87%E8%AF%86Flickr%E6%91%84%E5%BD%B1%E5%B8%88%E7%9A%84%E4%BD%9C%E5%93%81/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/斯坦福大学iOS开发公开课总结（十四 十五）：CoreLocation，MapKit，在地图上标识Flickr摄影师的作品/</id>
    <published>2018-12-24T18:33:45.635Z</published>
    <updated>2018-12-24T18:33:45.637Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本总结将第十四和十五课放在了一起，原因有二：第一是略去了ipad开发Demo的部分（因为笔者木有ipad，无法进行调试）。第二是两节课都讲解了关于地图框架的相关知识，故将二者放在一起总结。&lt;/p&gt;
&lt;p&gt;在本篇总结的最后，会给大家讲解在地图上显示Flickr上摄影师的照片作品。&lt;/p&gt;
&lt;h1 id=&quot;Network-Activity-Indicator&quot;&gt;&lt;a href=&quot;#Network-Activity-Indicator&quot; class=&quot;headerlink&quot; title=&quot;Network Activity Indicator&quot;&gt;&lt;/a&gt;Network Activity Indicator&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;顾名思义，该控件叫做网络活动指示器。当app有网络活动时，可以让状态栏左边的小圆圈滚动用来提示用户当前的网络状态。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@property(nonatomic,getter=isNetworkActivityIndicatorVisible) BOOL networkActivityIndicatorVisible;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果设定为YES，状态栏上的小转轮就会转，反之亦然。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：应用中的所有线程都可使用这个转轮，我们需要通过各种方法来向用户准确显示转轮的状态。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://github.com/knightsj/knightsj.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>斯坦福大学iOS开发公开课总结（十六）：模态视图，UITextField，UImagePickerController，在Flickr添加摄影师照片Demo</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6iOS%E5%BC%80%E5%8F%91%E5%85%AC%E5%BC%80%E8%AF%BE%E6%80%BB%E7%BB%93%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9A%E6%A8%A1%E6%80%81%E8%A7%86%E5%9B%BE%EF%BC%8CUITextField,UImagePickerController%EF%BC%8C%E5%9C%A8Flickr%E6%B7%BB%E5%8A%A0%E6%91%84%E5%BD%B1%E5%B8%88%E7%85%A7%E7%89%87Demo/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/斯坦福大学iOS开发公开课总结（十六）：模态视图，UITextField,UImagePickerController，在Flickr添加摄影师照片Demo/</id>
    <published>2018-12-24T18:33:45.634Z</published>
    <updated>2018-12-24T18:33:45.635Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本节课讲解了模态视图，文本框，UImagePickerController的相关知识，并延续了上一节课的Demo，添加了照相并存储照片的功能。&lt;/p&gt;
&lt;h1 id=&quot;模态视图&quot;&gt;&lt;a href=&quot;#模态视图&quot; class=&quot;headerlink&quot; title=&quot;模态视图&quot;&gt;&lt;/a&gt;模态视图&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;模态视图不同于左右滑入的视图，它是从下往上，覆盖整个屏幕的视图。每次滑入都会重新新建一个控制器。通常用于修改信息等操作。&lt;/p&gt;
&lt;p&gt;显示模态视图：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  [self presentViewController:(nonnull UIViewController *) animated:(BOOL) completion:^&amp;#123;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让模态视图消失：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (void)dissmissViewControllerAnimated:(BOOL)animated completion:(void(^))block;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意:该消息是发送给present该模态视图的控制器，而不是该模态视图本身。因此，调用方法应该是：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[self.presentingViewController dissmissViewControllerAnimated:YES ...];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://github.com/knightsj/knightsj.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>斯坦福大学iOS开发公开课总结（十八）：国际化，自定义设置UI</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6iOS%E5%BC%80%E5%8F%91%E5%85%AC%E5%BC%80%E8%AF%BE%E6%80%BB%E7%BB%93%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9A%E5%9B%BD%E9%99%85%E5%8C%96%EF%BC%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AE%BE%E7%BD%AEUI/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/斯坦福大学iOS开发公开课总结（十八）：国际化，自定义设置UI/</id>
    <published>2018-12-24T18:33:45.633Z</published>
    <updated>2018-12-24T18:33:45.634Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本篇是斯坦福大学iOS7系列课程（CS193P）的最后一节课的总结，终于把18节课的内容都总结完了，而且这个文集也画上了句号，有点不舍的赶脚。。&lt;/p&gt;
&lt;p&gt;好了，不煽情了，开始！&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://github.com/knightsj/knightsj.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>斯坦福大学iOS开发公开课总结（十二 十三）：CoreData,表格视图，Flickr摄影师资料列表Demo</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6iOS%E5%BC%80%E5%8F%91%E5%85%AC%E5%BC%80%E8%AF%BE%E6%80%BB%E7%BB%93%EF%BC%88%E5%8D%81%E4%BA%8C%20%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9ACoreData%EF%BC%8C%E8%A1%A8%E6%A0%BC%E8%A7%86%E5%9B%BE%EF%BC%8CFlickr%E6%91%84%E5%BD%B1%E5%B8%88%E8%B5%84%E6%96%99%E5%88%97%E8%A1%A8/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/斯坦福大学iOS开发公开课总结（十二 十三）：CoreData，表格视图，Flickr摄影师资料列表/</id>
    <published>2018-12-24T18:33:45.631Z</published>
    <updated>2018-12-24T18:33:45.632Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;第十二课和第十三课都介绍了CoreData的知识，并在十三课的中段通过一个Demo来具体实现了CoreData的操作。&lt;/p&gt;
&lt;p&gt;笔者之前从未接触过Core Data的相关知识，因此学期这两节课比较吃力，这一篇总结还是有很多需要改进的地方，以后随着对Core Data认识的深入和对这两节课的反复咀嚼，会不断更新该总结。&lt;/p&gt;
&lt;p&gt;开始吧！&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://github.com/knightsj/knightsj.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>斯坦福大学iOS开发公开课总结（十七）：CoreMotion，app的生命周期，方块碰撞游戏Demo</title>
    <link href="https://github.com/knightsj/knightsj.github.io/2018/12/25/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6iOS%E5%BC%80%E5%8F%91%E5%85%AC%E5%BC%80%E8%AF%BE%E6%80%BB%E7%BB%93%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9ACoreMotion%EF%BC%8Capp%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%EF%BC%8C%E6%96%B9%E5%9D%97%E7%A2%B0%E6%92%9E%E6%B8%B8%E6%88%8FDemo/"/>
    <id>https://github.com/knightsj/knightsj.github.io/2018/12/25/斯坦福大学iOS开发公开课总结（十七）：CoreMotion，app的生命周期，方块碰撞游戏Demo/</id>
    <published>2018-12-24T18:33:45.630Z</published>
    <updated>2018-12-24T18:33:45.631Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本节课讲解了Core Motion框架的知识，简单介绍了app的生命周期，最后用一个方块碰撞游戏来对本节课的知识作总结。&lt;/p&gt;
&lt;h1 id=&quot;Core-Motion&quot;&gt;&lt;a href=&quot;#Core-Motion&quot; class=&quot;headerlink&quot; title=&quot;Core Motion&quot;&gt;&lt;/a&gt;Core Motion&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;CoreMotion是一个专门处理设备“动作”的框架，其中包含了加速度计，陀螺仪和磁力针。加速计由三个坐标轴决定，用户最常见的操作设备的动作移动，晃动手机(摇一摇)，倾斜手机都可以被设备检测到，加速计可以检测到线性的变化。陀螺仪可以更好的检测到偏转的动作，可以根据用户的动作做出相应的动作；磁力针可以判断设备的方向。&lt;/p&gt;
&lt;p&gt;CoreMotion的工作是基于&lt;code&gt;CMMotionManager&lt;/code&gt;类来执行的。我们看一下该类的API：&lt;/p&gt;
&lt;h2 id=&quot;CMMotionManager&quot;&gt;&lt;a href=&quot;#CMMotionManager&quot; class=&quot;headerlink&quot; title=&quot;CMMotionManager&quot;&gt;&lt;/a&gt;CMMotionManager&lt;/h2&gt;&lt;h3 id=&quot;检测硬件设备：&quot;&gt;&lt;a href=&quot;#检测硬件设备：&quot; class=&quot;headerlink&quot; title=&quot;检测硬件设备：&quot;&gt;&lt;/a&gt;检测硬件设备：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@property(readonly, nonatomic, getter=isAccelerometerAvailable) BOOL accelerometerAvailable __TVOS_PROHIBITED;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property(readonly, nonatomic, getter=isGyroAvailable) BOOL gyroAvailable __TVOS_PROHIBITED;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property(readonly, nonatomic, getter=isMagnetometerAvailable) BOOL magnetometerAvailable NS_AVAILABLE(NA,5_0) __TVOS_PROHIBITED;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property(readonly, nonatomic, getter=isDeviceMotionAvailable) BOOL deviceMotionAvailable __TVOS_PROHIBITED;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="https://github.com/knightsj/knightsj.github.io/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://github.com/knightsj/knightsj.github.io/tags/Objective-C/"/>
    
  </entry>
  
</feed>
